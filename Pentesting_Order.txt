1.Account Enumeration and Guessable User Account: Login page. I tested the error messages when wrong input is written. 
If the username is right, but the password is wrong, the system gives a error message "Bad credentials". If the username 
is wrong as well, the system gives an error message "Could not find username ... in data source".

2. Cross-site Scripting: After logging to the Ash account with the given credentials username "ash" and password
"mypass" I started brousing through the webpages. I navigated to the "List my Properties" page and tried to 
exploit an XSS attack. I wrote a script in the URL,“?q=<script>alert(document.cookie)</script>”, and pressed "Enter".
When the page reloaded, an alert box was presented, displaying the JSESSIONID of the current session.

3. Cross-site Request Forgery: After navigating to the "Profile and Self Service" page, I was presented with a "Change Password" form.
I used the "Developer Tools" to see the request sent to the database after the password is changed. The field that the request 
sends was named "newPassword". This caught my attention.
I decided to create a html form that changes the user's password without any authorisation. All they have to do is click the link to
the page I created. When they click it, their password changes automatically to "water" without them knowing. 

4. Insecure direct object references: After navigating to the "Payment Details" page, I decided to start inspecting it. What caught 
my attention was the URL. I saw that it was "http://192.168.56.101:8696/payment-details/2". the important part that looked vulnerable
was the "2" at the end of the URL. I decided to change it to "1" to see what would happen. After changing it, the page indeed changed. I
was presented with another account's "Payment Details" page. Then I changed it to "3" and I was presented with another account's page.
It did not work with other numbers so I assumed there were another 2 accounts made in this webpage.

5. Information Leakage: After I saw that there have to be more accounts, I started inspecting the pages for information leakage.
A comment in the login page code caught my attention. "Remember the Evil Dead characters". I started researching what "Evil Dead" was.
It turned out to be a TV Show from the 80's. I noticed that the main character, Ash, is played by an actor called Bruce. Immediately
after that, I opened the login page and typed "bruce" as username and a random password just to see whether the username "bruce"
exists in the database. The error message that was shown was "Bad Credentials", meaning the username was in the database, I just
had to crack the password.

I had already done the Cross-site Request Forgery to change Ash's password, so I just had to do the same thing for Bruce. I md5 hashed
the "bruce" username, so it would match it in the database. I changed the password to water. After I opened the link in Firefox, 
the password to the Bruce account was successfully changed to bruce without the user's knowledge or authorisation.

6. SQL Injection: After I successfully logged into the "bruce" account I started inspecting the pages one by one. I noticed that 
there was an additional page, "User Admin", which meant that the "bruce" account had to be the admin account. I opened the page,
I was presented with fields that were meant to change the other accounts' usernames. I thought I would perform an SQL injection in
one of the fields. I wrote "bruce'--" in the first field and clicked "Enter". The page reloaded, all the usernames were changed to "bruce".
Another important observation was the third account, which belonged to Sam and had a username "sam".
